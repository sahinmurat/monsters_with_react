{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearcBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filterMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAGaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,6BAAKN,EAAMI,QAAQG,YCJlBC,G,MAAW,SAAAR,GAKpB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,W,MCCpBM,MAVf,YAAgD,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aAC5B,OACI,uBACAZ,UAAU,SACVa,KAAK,SACLC,SAAUF,EACVD,YAAaA,KCoCNI,E,kDAvCb,aAAe,IAAD,8BACZ,gBAYFH,aAAc,SAAAI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAKD,MACrBD,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAY/C,WAAU,IAAD,EAE0BC,KAAKN,MAA/Bb,EAFA,EAEAA,SAAUU,EAFV,EAEUA,YACXU,EAAiBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAUW,YAAY,kBAAkBC,aAAce,KAAKf,eAC3D,cAAC,EAAD,CAAUJ,SAAUoB,W,GAlCRI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.23392587.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className='card-container'>\r\n            <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2`} />\r\n            <h2> {props.monster.name} </h2>\r\n            <h4>{props.monster.email}</h4>\r\n                    </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = props => {\r\n    // In first usage to transfer props this method works\r\n    // <div className='card-list'>\r\n    //      {props.children}\r\n    // </div>\r\n    return (\r\n        <div className='card-list'>\r\n            {props.monsters.map(monster => (\r\n                <Card key={monster.id} monster={monster} /> \r\n            ))}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nfunction SearcBox({placeholder, handleChange}) {\r\n    return (\r\n        <input \r\n        className='search'\r\n        type='search' \r\n        onChange={handleChange }\r\n        placeholder={placeholder} />\r\n    )\r\n}\r\n\r\nexport default SearcBox\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { CardList } from './components/card-list/card-list.component.jsx'\r\nimport SearcBox from './components/search-box/search-box.component';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    };\r\n\r\n  }\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(res => res.json(res))\r\n      .then(users => this.setState({ monsters: users }))\r\n  }\r\n  handleChange= e  => {\r\n    this.setState({searchField: e.target.value})\r\n  }\r\n  // There is two usage for props to transfer. This usage works too\r\n  // <CardList >\r\n  //    {this.state.monsters.map(monster => (\r\n  //      <h1 key={monster.id}> {monster.name} </h1>\r\n  // \t ))}\r\n  // </CardList>\r\n\r\nrender() {\r\n\r\n  const {monsters, searchField } = this.state;\r\n  const filterMonsters = monsters.filter(monster => \r\n    monster.name.toLowerCase().includes(searchField.toLowerCase()))\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Monsters Rolodex</h1>\r\n      <SearcBox placeholder='search monsters' handleChange={this.handleChange}/>\r\n      <CardList monsters={filterMonsters} />\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}